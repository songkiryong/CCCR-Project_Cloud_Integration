{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNZiyign2Khwlxc20DbqLuj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/songkiryong/cloud_integration/blob/main/Untitled1.ipynb/content/*\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ORnvpquwc4Cr",
        "outputId": "2a373317-ad96-4fca-d05c-1027b2617744"
      },
      "source": [
        "!sh requirements.sh\n",
        "\n",
        "\n",
        "1. run/detect에 계속  추가되는거 고치기\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: flask-ngrok in /usr/local/lib/python3.7/dist-packages (0.0.25)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from flask-ngrok) (2.23.0)\n",
            "Requirement already satisfied: Flask>=0.8 in /usr/local/lib/python3.7/dist-packages (from flask-ngrok) (1.1.4)\n",
            "Requirement already satisfied: Jinja2<3.0,>=2.10.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.8->flask-ngrok) (2.11.3)\n",
            "Requirement already satisfied: Werkzeug<2.0,>=0.15 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.8->flask-ngrok) (1.0.1)\n",
            "Requirement already satisfied: click<8.0,>=5.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.8->flask-ngrok) (7.1.2)\n",
            "Requirement already satisfied: itsdangerous<2.0,>=0.24 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.8->flask-ngrok) (1.1.0)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from Jinja2<3.0,>=2.10.1->Flask>=0.8->flask-ngrok) (2.0.1)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->flask-ngrok) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->flask-ngrok) (2021.5.30)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->flask-ngrok) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->flask-ngrok) (2.10)\n",
            "Requirement already satisfied: pytesseract in /usr/local/lib/python3.7/dist-packages (0.3.8)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from pytesseract) (8.3.2)\n",
            "fatal: destination path 'yolov5' already exists and is not an empty directory.\n",
            "\u001b[31mERROR: Could not open requirements file: [Errno 2] No such file or directory: './yolov5/requirements.txt\\r'\u001b[0m\n",
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "The following additional packages will be installed:\n",
            "  tesseract-ocr-eng tesseract-ocr-osd\n",
            "The following NEW packages will be installed:\n",
            "  tesseract-ocr tesseract-ocr-eng tesseract-ocr-osd\n",
            "0 upgraded, 3 newly installed, 0 to remove and 40 not upgraded.\n",
            "Need to get 4,795 kB of archives.\n",
            "After this operation, 15.8 MB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 tesseract-ocr-eng all 4.00~git24-0e00fe6-1.2 [1,588 kB]\n",
            "Get:2 http://archive.ubuntu.com/ubuntu bionic/universe amd64 tesseract-ocr-osd all 4.00~git24-0e00fe6-1.2 [2,989 kB]\n",
            "Get:3 http://archive.ubuntu.com/ubuntu bionic/universe amd64 tesseract-ocr amd64 4.00~git2288-10f4998a-2 [218 kB]\n",
            "Fetched 4,795 kB in 1s (3,762 kB/s)\n",
            "debconf: unable to initialize frontend: Dialog\n",
            "debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, <> line 3.)\n",
            "debconf: falling back to frontend: Readline\n",
            "debconf: unable to initialize frontend: Readline\n",
            "debconf: (This frontend requires a controlling tty.)\n",
            "debconf: falling back to frontend: Teletype\n",
            "dpkg-preconfigure: unable to re-open stdin: \n",
            "Selecting previously unselected package tesseract-ocr-eng.\n",
            "(Reading database ... 148492 files and directories currently installed.)\n",
            "Preparing to unpack .../tesseract-ocr-eng_4.00~git24-0e00fe6-1.2_all.deb ...\n",
            "Unpacking tesseract-ocr-eng (4.00~git24-0e00fe6-1.2) ...\n",
            "Selecting previously unselected package tesseract-ocr-osd.\n",
            "Preparing to unpack .../tesseract-ocr-osd_4.00~git24-0e00fe6-1.2_all.deb ...\n",
            "Unpacking tesseract-ocr-osd (4.00~git24-0e00fe6-1.2) ...\n",
            "Selecting previously unselected package tesseract-ocr.\n",
            "Preparing to unpack .../tesseract-ocr_4.00~git2288-10f4998a-2_amd64.deb ...\n",
            "Unpacking tesseract-ocr (4.00~git2288-10f4998a-2) ...\n",
            "Setting up tesseract-ocr-osd (4.00~git24-0e00fe6-1.2) ...\n",
            "Setting up tesseract-ocr-eng (4.00~git24-0e00fe6-1.2) ...\n",
            "Setting up tesseract-ocr (4.00~git2288-10f4998a-2) ...\n",
            "Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GXwRsipFfkWy",
        "outputId": "e3526edd-6598-4ff5-946f-8600163bf8c2"
      },
      "source": [
        "\n",
        "from flask import Flask, request, render_template\n",
        "import json\n",
        "import requests\n",
        "#import model\n",
        "import json\n",
        "import os\n",
        "import shutil\n",
        "\n",
        "from bs4 import BeautifulSoup\n",
        "from flask import Blueprint, request, render_template, flash, redirect, url_for, Flask\n",
        "from flask import current_app as current_app\n",
        "from flask_ngrok import run_with_ngrok\n",
        "import pill_deeplearning_result as pmodel # 딥러닝 모델 파이썬 파일\n",
        "#from django.shortcuts import render\n",
        "from urllib.request import urlopen\n",
        "#from django.conf import settings\n",
        "#from django import template\n",
        "\n",
        "pillDict = {} # 파싱한 알약의 이름과 링크를 key,value 형태로 저장하기 위한 딕셔너리 변수\n",
        "pillDictBackup = {} # 재설정된 조건으로 파싱한 결과가 없을때를 대비해 그 전 dict값을 넣는 딕셔너리 변수\n",
        "pillresult = {}\n",
        "\n",
        "#pillImg = {} pillImgBackup = {}pillresult = {}\n",
        "\n",
        "app = Flask(__name__, template_folder='/content')\n",
        "#app.config['TEMPLATES_AUTO_RELOAD'] = True\n",
        "app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 300\n",
        "run_with_ngrok(app)\n",
        "\n",
        "#파싱\n",
        "# againNotagain이 1이면 조건값을 재설정한 후 파싱하는 것으로 pillDict을 초기화해준다\n",
        "def parser(result, againNotagain):\n",
        "    #beautifulSoup을 통해 html에서 알약 세부사항이 있는 링크들만 따오는 ide\n",
        "    dest=\"https://terms.naver.com/medicineSearch.naver?mode=exteriorSearch&shape=\"+str(result['sha'])+\"&color=\"+str(result['col'])+\"&dosageForm=&divisionLine=&identifier=\"+str(result['ide'])\n",
        "    res = requests.get(dest)\n",
        "    soup = BeautifulSoup(res.text, 'html.parser')\n",
        "\n",
        "    pill_tags = soup.find_all(\"div\", attrs={\"class\":\"image_area\"})\n",
        "    \n",
        "    pillLink = '' # 알약 링크 저장\n",
        "    pillName = '' # 알약 이름 저장\n",
        "\n",
        "    if(againNotagain == 1): # 재설정된 조건으로 파싱할 경우 pillDict 초기화\n",
        "      global pillDict\n",
        "      global pillDictBackup\n",
        "      pillDictBackup = pillDict # pillDict 백업\n",
        "      pillDict = {}\n",
        "\n",
        "    siteNum = 0\n",
        "    for tag in pill_tags:\n",
        "      if(siteNum == 7):\n",
        "        break\n",
        "      tmp='https://terms.naver.com/' + tag.find(\"a\")[\"href\"] # 파싱할 링크\n",
        "      \n",
        "      res = requests.get(tmp)\n",
        "      soup = BeautifulSoup(res.text, 'html.parser')\n",
        "      soupImg = soup.find(\"span\",class_=\"img_box\")\n",
        "\n",
        "      if(soup.strong.string != '다시 한번 확인해주세요!'): # 잘못된 링크 값이 아니면\n",
        "\n",
        "        imgUrl = soupImg.find(\"img\")[\"data-src\"]\n",
        "        num = 1\n",
        "        filename=''\n",
        "        filestaticname = ''\n",
        "        while True: # 파일이 없는 걸 발견할 때 까지 무한반복\n",
        "          filename = '/content/static/pills/pillImg' + str(num) + '.jpg'#'pillImg' + str(num) + '.jpg' # \n",
        "          \n",
        "          if(os.path.isfile(filename) == False):\n",
        "            filestaticname = 'pills/pillImg' + str(num) + '.jpg'\n",
        "            break\n",
        "          num += 1 # 파일 존재시 num 1증가\n",
        "\n",
        "        with urlopen(imgUrl) as f:\n",
        "          with open(filename,'wb') as h: # 이미지 + 사진번호 + 확장자는 jpg\n",
        "            img = f.read() #이미지 읽기\n",
        "            h.write(img) # 이미지 저장\n",
        "\n",
        "        # 알약 링크, 이름 저장\n",
        "        pillLink = 'https://terms.naver.com/' + tag.find(\"a\")[\"href\"]\n",
        "        pillName = tag.find(\"img\")[\"alt\"]\n",
        "        #print(filename)\n",
        "        pillDict[str(num)] = filestaticname\n",
        "        pillDict[pillName] = pillLink # 딕셔너리에 이름 : 링크 형식으로 저장\n",
        "        siteNum += 1\n",
        "\n",
        "    return pillDict # 알약 딕셔너리 리턴\n",
        "\n",
        "def pill_text_par(link): # 알약의 세부내용을 파싱하는 함수\n",
        "\n",
        "    cnt = 0\n",
        "    for i, j in link.items():\n",
        "      if(cnt==1):\n",
        "        parsingLink = link[i]\n",
        "      cnt += 1\n",
        "\n",
        "    res = requests.get(parsingLink)\n",
        "    soup = BeautifulSoup(res.text, 'html.parser') # link의 내용을 soup에 저장\n",
        "\n",
        "\n",
        "    title = soup.find_all(\"h3\", attrs={\"class\":\"stress\"}) # 세부사항 큰 제목 파싱\n",
        "    detailText = soup.find_all(\"p\", attrs={\"class\":\"txt\"}) # 세부사항 내용 파싱\n",
        "\n",
        "    detail=[] # 세부내용 초기화\n",
        "    detailParsingcnt = 0 # 사용 주의사항 전까지의 글만 읽어오기 위한 count\n",
        "    for tag1,tag2 in zip(title, detailText): # 세부내용 detail에 저장\n",
        "        detail.append(tag1.get_text())\n",
        "        detail.append(tag2.get_text())\n",
        "\n",
        "        if(detailParsingcnt == 4):\n",
        "          break\n",
        "        detailParsingcnt+=1\n",
        "\n",
        "    return detail # 저장된 세부내용 값 리턴\n",
        "\n",
        "#메인화면\n",
        "@app.route('/',methods=['GET','POST'])\n",
        "\n",
        "def main():\n",
        "    return render_template('static/index.html.html')\n",
        "      \n",
        "@app.route('/post',methods=['GET','POST'])\n",
        "def post():\n",
        "    global pillDict\n",
        "    pillDict = {}\n",
        "    global pillDictBackup\n",
        "    pillDictBackup = {}\n",
        "    global pillresult\n",
        "    pillresult = {}\n",
        "\n",
        "    f = request.files['pill_file'] \n",
        "    \n",
        "\n",
        "    testdata_path = '/content/static/test_data/xx.png'\n",
        "    f.save(testdata_path) # 사용자에게 받은 파일 filepath 경로에 저장 \n",
        "\n",
        "    # 알약 사진 정보 mst.txt로\n",
        "    !python '/content/yolov5/detect.py' --weights '/content/best_s.pt' --img 416 --conf 0.5 --source '/content/static/test_data/xx.png' > '/content/yolov5/msg.txt'\n",
        "    \n",
        "    num = 2 # exp1은 없기에 2부터 시작\n",
        "    while True: # expnum(num:양수) 폴더가 없는 걸 발견할 때 까지 무한반복\n",
        "      if(os.path.isdir('/content/runs/detect/exp2') == False): # exp2폴더가 없을 때\n",
        "        num= -1\n",
        "        break\n",
        "\n",
        "      filename = '/content/runs/detect/exp' + str(num+1) # exp(num+1)폴더가 없을 때, exp(num)폴더를 사용\n",
        "      if(os.path.isdir(filename) == False):\n",
        "        break\n",
        "      num += 1 # 폴더 존재시 num 1증가\n",
        "\n",
        "    #shutil.copyfile(testdata_path, '/content/static/test_data/xx.png')\n",
        "\n",
        "    tmp = pmodel.detectPill(num) # 사진 색, 모양 추출, num은 detect할 exp폴더 num\n",
        "\n",
        "    pillresult['sha'] = tmp['sha']\n",
        "    pillresult['col'] = tmp['col']\n",
        "    pillresult['ide'] = tmp['ide'] # 다른 함수에서 사용하기 위해 값 각각 선언\n",
        "\n",
        "    parser_dic = parser(pillresult, 0) # parser함수를 통해 알약의 이름과 링크값이 들어있는 딕셔너리를 받음\n",
        "\n",
        "    if(len(parser_dic) >= 4): # 파싱 결과 값이 4개(사진포함) 이상일 때\n",
        "      return render_template('static/pillsList.html', testDataHtml=parser_dic, imgHtml = 'static/test_data/xx.png')\n",
        "    elif(len(parser_dic) == 0): # 파싱 결과가 없을 경우 메인사이트로 이동한단\n",
        "      return render_template('static/mainsite.html')\n",
        "\n",
        "    detailText = pill_text_par(parser_dic)\n",
        "    return render_template('static/onePillResult.html', testDataHtml=parser_dic, detailHtml=detailText, imgHtml = 'static/test_data/xx.png')\n",
        "\n",
        "    if(os.path.isfile('/content/static/test_data/xx.jpg') == True):\n",
        "      os.remove('/content/static/test_data/xx.jpg')\n",
        "    elif(os.path.isfile('/content/static/test_data/xx.png') == True):\n",
        "      os.remove('/content/static/test_data/xx.png') \n",
        "\n",
        "@app.route('/result',methods=['GET','POST'])\n",
        "def result():\n",
        "    getpillname = request.values.get('pill_name') # 사용자가 입력한 알약 이름 가져옴\n",
        "\n",
        "    pillresult['ide'] = getpillname # 알약의 ide값 입력받은 값으로 수정\n",
        "\n",
        "    parser_again_dic = {}\n",
        "    parser_again_dic = parser(pillresult, 1) # 수정된 조건값으로 다시 파싱\n",
        "\n",
        "    \n",
        "\n",
        "    #같은 이름의 알약이 없으면 다시 원래의 사이트를 보여준다.\n",
        "    if(len(parser_again_dic) < 1):\n",
        "      return render_template('static/pillsList.html', testDataHtml = pillDictBackup, imgHtml = 'test_data/xx.png')  \n",
        "    elif(len(parser_again_dic) >= 4): # 알약 종류 2개 이상 나올시\n",
        "      return render_template('static/pillsList.html', testDataHtml = parser_again_dic, imgHtml = 'test_data/xx.png')  \n",
        "    else: # 한 개의 알약 값만 나올 때\n",
        "      detailText = pill_text_par(parser_again_dic)\n",
        "      return render_template('static/onePillResult.html', testDataHtml = parser_again_dic, detailHtml=detailText, imgHtml = 'test_data/xx.png')  #return render_template('ex.html', testDataHtml = detailText)\n",
        "\n",
        "@app.route(\"/toMain\", methods=[\"GET\", \"POST\"])\n",
        "def toMain():\n",
        "    global pillDict\n",
        "    pillDict = {}\n",
        "    global pillDictBackup\n",
        "    pillDictBackup = {}\n",
        "    global pillresult\n",
        "    pillresult = {}\n",
        "    return redirect('/')\n",
        "\n",
        "@app.after_request\n",
        "def add_header(r):\n",
        "    \"\"\"\n",
        "    Add headers to both force latest IE rendering engine or Chrome Frame,\n",
        "    and also to cache the rendered page for 10 minutes.\n",
        "    \"\"\"\n",
        "    r.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n",
        "    r.headers[\"Pragma\"] = \"no-cache\"\n",
        "    r.headers[\"Expires\"] = \"0\"\n",
        "    r.headers['Cache-Control'] = 'public, max-age=0'\n",
        "    return r\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    app.run()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Serving Flask app \"__main__\" (lazy loading)\n",
            " * Environment: production\n",
            "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
            "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
            " * Debug mode: off\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
            " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Running on http://9f42-104-154-231-92.ngrok.io\n",
            " * Traffic stats available on http://127.0.0.1:4040\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[33mGET /putFile.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[33mGET /putFile.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[33mGET /index.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[33mGET /index.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:37] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:38] \"\u001b[33mGET /index.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:38] \"\u001b[33mGET /index.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:38] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:38] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:38] \"\u001b[33mGET /putFile.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:38] \"\u001b[33mGET /putFile.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:41] \"\u001b[33mGET /putFile.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:41] \"\u001b[33mGET /putFile.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:42] \"\u001b[33mGET /index.js HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/Sep/2021 04:08:42] \"\u001b[33mGET /index.js HTTP/1.1\u001b[0m\" 404 -\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "id": "sNLY78xQ4tuP",
        "outputId": "6cfe4dbf-ca30-49f3-c4dc-3cabc34113f9"
      },
      "source": [
        "sudo apt install apache2"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-7230a51006bb>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    sudo apt install apache2\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    }
  ]
}